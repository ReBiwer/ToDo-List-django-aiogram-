services:
  postgres:
    container_name: postgres_container
    image: postgres:16.1-alpine3.18
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - /var/lib/postgresql/data
      - .:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}"]
      interval: 10s
      timeout: 10s
      retries: 30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      my_network:
        ipv4_address: 172.18.0.3

  redis:
    image: redis:latest
    env_file:
      - .env
    container_name: redis_container
    ports:
      - '6379:6379'
    networks:
      my_network:
        ipv4_address: 172.18.0.6
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data

  api:
    container_name: api
    build:
      context: .
      dockerfile: todo_list/Dockerfile
    command:
      ["sh", "todo_list/start.sh"]
    ports:
      - '8000:8000'
    volumes:
      - .:/app
    networks:
      my_network:
        ipv4_address: 172.18.0.5

  bot:
    container_name: bot
    build:
      context: .
      dockerfile: tg_bot/Dockerfile
    command:
      ["python", "tg_bot/run_bot.py"]
    volumes:
      - .:/bot
    networks:
      - my_network


volumes:
  redis_data:
  app:
  bot:

networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1